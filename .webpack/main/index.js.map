{"version":3,"file":"index.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,uBCAzBF,EAAOC,QAAUC,QAAQ,K,uBCAzBF,EAAOC,QAAUC,QAAQ,c,sBCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCtBA,MAAM,IAAEQ,EAAG,cAAEC,EAAa,QAAEC,GAAY,EAAQ,MAC1C,MAAEC,GAAU,EAAQ,KACpBC,EAAK,EAAQ,KACbC,EAAO,EAAQ,IAEfC,EAAiB,CACnBC,MAAO,IACPC,OAAQ,IACRC,eAAgB,CACZC,QAASL,EAAKM,KAAKC,UAAW,gBAItC,IAAIC,EACAC,EAEJ,MAAMC,EAAQ,CAACC,IACX,IAAIC,EAAU,CAEdA,KAAgBC,IACZ,MAAMb,EAAOA,EAAKM,KAAKC,UAAW,UAAUM,KAC5Cd,EAAGe,QAAQd,GAAM,CAACe,EAAKC,KACfD,GACAE,QAAQC,MAAMH,GAGlBP,EAAeW,YAAYC,KAAK,GAAGP,SAAY,CAC3Cb,KAAMgB,GACR,GACJ,GAGN,OAAOJ,CACV,EAjBa,GAmBdjB,EAAI0B,YAAYC,MAAKX,IACjBd,EAAQ0B,GAAG,gBAAgB,CAACC,EAAOC,KAC/BhB,EAAWU,YAAYC,KAAK,YAAaK,EAAU,IAGvD5B,EAAQ0B,GAAG,aAAa,CAACC,EAAOE,KAC5B,MAAMC,EAAY3B,EAAKM,KAAKC,UAAWmB,GACvCjB,EAAWU,YAAYC,KAAK,YAAaO,EAAU,IAGvD9B,EAAQ0B,GAAG,YAAYZ,IACnB,IAAIiB,EAAS,CACTC,OAAQC,EAAa,iBACrBC,IAAKD,EAAa,eAOtB,SAASA,EAAaE,GAClB,IAAIC,EAAY,GAEhB,MAAMjB,EAAQjB,EAAGmC,YAAYF,GAE7B,IAAK,IAAIG,EAAI,EAAGA,EAAInB,EAAMoB,OAAQD,IAC9BF,EAAUI,KAAK,CACXC,KAAMtC,EAAKuC,MAAMvB,EAAMmB,IAAIG,KAC3BE,IAAKxC,EAAKM,KAAKC,UAAWyB,EAAWhB,EAAMmB,MAInD,OAAOF,CACX,CAjBAhB,QAAQwB,IAAIb,GAEZpB,EAAeW,YAAYC,KAAK,YAAaQ,EAe7C,IAGJpB,EAAiB,IAAIZ,EAAcK,GACnCO,EAAekC,SAAS,yBAExBjC,EAAa,IAAIb,EAAcK,GAC/BQ,EAAWiC,SAAS,qBAEpB/C,EAAI4B,GAAG,YAAY,KAC8B,IAAzC3B,EAAc+C,gBAAgBP,QAAcQ,cAAa,IAGjElC,EAAMmC,KAAK,UACXnC,EAAMmC,KAAK,QAAQ,IAGvBlD,EAAI4B,GAAG,qBAAqB,KACC,WAArBuB,QAAQC,UAAuBpD,EAAIqD,MAAK,G","sources":["webpack://malcolm-app/external node-commonjs \"electron\"","webpack://malcolm-app/external node-commonjs \"fs\"","webpack://malcolm-app/external node-commonjs \"original-fs\"","webpack://malcolm-app/external node-commonjs \"path\"","webpack://malcolm-app/webpack/bootstrap","webpack://malcolm-app/./main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"original-fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { app, BrowserWindow, ipcMain } = require('electron');\nconst { fstat } = require('original-fs');\nconst fs = require('fs');\nconst path = require('path');\n\nconst windowDefaults = {\n    width: 800,\n    height: 600,\n    webPreferences: {\n        preload: path.join(__dirname, 'preload.js'),\n    },\n};\n\nlet controlsWindow;\nlet showWindow;\n\nconst media = (_ => {\n    let _public = {};\n\n    _public.list = (dir) => {\n        const path = path.join(__dirname, `_media/${dir}`);\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                console.error(err);\n            }\n\n            controlsWindow.webContents.send(`${dir}-list`, {\n                path: files\n            });\n        });\n    }\n\n    return _public;\n})();\n\napp.whenReady().then(_ => {\n    ipcMain.on('imageClicked', (event, imagePath) => {\n        showWindow.webContents.send('showImage', imagePath);\n    });\n\n    ipcMain.on('playVideo', (event, videoName) => {\n        const videoPath = path.join(__dirname, videoName);\n        showWindow.webContents.send('playVideo', videoPath);\n    });\n\n    ipcMain.on('getFiles', _ => {\n        let result = {\n            images: getFilesData('_media/images'),\n            sfx: getFilesData('_media/sfx')\n        }\n\n        console.log(result);\n\n        controlsWindow.webContents.send(`listFiles`, result);\n\n        function getFilesData(localPath) {\n            let filesData = [];\n\n            const files = fs.readdirSync(localPath);\n\n            for (let i = 0; i < files.length; i++) {\n                filesData.push({\n                    name: path.parse(files[i]).name,\n                    url: path.join(__dirname, localPath, files[i])\n                });\n            }\n\n            return filesData;\n        }\n    });\n\n    controlsWindow = new BrowserWindow(windowDefaults);\n    controlsWindow.loadFile('windows/controls.html');\n\n    showWindow = new BrowserWindow(windowDefaults);\n    showWindow.loadFile('windows/show.html');\n\n    app.on('activate', () => {\n        if (BrowserWindow.getAllWindows().length === 0) createWindow()\n    });\n\n    media.list('images');\n    media.list('sound');\n});\n\napp.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') app.quit()\n});"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","BrowserWindow","ipcMain","fstat","fs","path","windowDefaults","width","height","webPreferences","preload","join","__dirname","controlsWindow","showWindow","media","_","_public","dir","readdir","err","files","console","error","webContents","send","whenReady","then","on","event","imagePath","videoName","videoPath","result","images","getFilesData","sfx","localPath","filesData","readdirSync","i","length","push","name","parse","url","log","loadFile","getAllWindows","createWindow","list","process","platform","quit"],"sourceRoot":""}