{"version":3,"file":"index.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,uBCAzBF,EAAOC,QAAUC,QAAQ,K,uBCAzBF,EAAOC,QAAUC,QAAQ,c,sBCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCtBA,MAAM,IAAEQ,EAAG,cAAEC,EAAa,QAAEC,GAAY,EAAQ,MAC1C,MAAEC,GAAU,EAAQ,KACpBC,EAAK,EAAQ,KACbC,EAAO,EAAQ,IAEfC,EAAiB,CACnBC,MAAO,IACPC,OAAQ,IACRC,EAAG,EACHC,eAAgB,CACZC,QAASN,EAAKO,KAAKC,UAAW,gBAItC,IAAIC,EACAC,EAEJf,EAAIgB,YAAYC,MAAKC,IACjBhB,EAAQiB,GAAG,kBAAkB,CAACC,EAAOC,KACjCN,EAAWO,YAAYC,KAAK,gBAAiBF,GAC7CjB,EAAGoB,cAAcnB,EAAKO,KAAKC,UAAW,eAAgBQ,EAAQ,IAGlEnB,EAAQiB,GAAG,gBAAgB,CAACC,EAAOK,KAC/BV,EAAWO,YAAYC,KAAK,YAAaE,EAAU,IAGvDvB,EAAQiB,GAAG,aAAa,CAACC,EAAOM,KAC5BX,EAAWO,YAAYC,KAAK,YAAaG,EAAU,IAGvDxB,EAAQiB,GAAG,YAAY,CAACC,EAAOO,KAC3BZ,EAAWO,YAAYC,KAAK,WAAYI,EAAG,IAG/CzB,EAAQiB,GAAG,SAAS,CAACC,EAAOQ,KACxBb,EAAWO,YAAYC,KAAK,QAASK,EAAK,IAG9C1B,EAAQiB,GAAG,YAAYD,IACnB,IAQIG,EARAQ,EAAS,CACTC,OAAQC,EAAa,iBACrBC,OAAQD,EAAa,iBACrBE,IAAKF,EAAa,eAGtBjB,EAAeQ,YAAYC,KAAK,YAAaM,GAI7C,IACIR,EAAUjB,EAAG8B,aAAa7B,EAAKO,KAAKC,UAAW,eAAgB,CAC3DsB,SAAU,QAIlB,CAFE,MAAOC,GACLC,QAAQC,IAAIF,EAChB,CAIA,SAASL,EAAaQ,GAClB,IAAIC,EAAY,IAgBpB,SAA0BnC,GAClBD,EAAGqC,WAAWpC,IAIlBD,EAAGsC,UAAUrC,EAAMsC,QAAU,CAAEC,WAAW,GAC9C,CApBIC,CAAiBN,GAEjB,MAAMO,EAAQ1C,EAAG2C,YAAYR,GAE7B,IAAK,IAAIS,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC9BR,EAAUU,KAAK,CACXC,KAAM9C,EAAK+C,MAAMN,EAAME,IAAIG,KAC3BE,IAAKhD,EAAKO,KAAKC,UAAW0B,EAAWO,EAAME,MAInD,OAAOR,CACX,CAjBA1B,EAAeQ,YAAYC,KAAK,mBAAoBF,EAyBpD,IAGJP,EAAiB,IAAIb,EAAc,IAC5BK,EACHgD,EAAG,IAGPxC,EAAeyC,SAAS,yBAExBxC,EAAa,IAAId,EAAc,IACxBK,EACHgD,EAAGhD,EAAeC,MAClBiD,iBAAiB,EACjBC,gBAAgB,IAGpB1C,EAAWwC,SAAS,qBACpBxC,EAAW2C,QAAQ,MACnB3C,EAAW4C,sBAAqB,GAEhC3D,EAAImB,GAAG,YAAY,KAC8B,IAAzClB,EAAc2D,gBAAgBX,QAC9BY,cACJ,GACF,IAGN7D,EAAImB,GAAG,qBAAqB,KACC,WAArB2C,QAAQC,UAAuB/D,EAAIgE,MAAK,G","sources":["webpack://malcolm-app/external node-commonjs \"electron\"","webpack://malcolm-app/external node-commonjs \"fs\"","webpack://malcolm-app/external node-commonjs \"original-fs\"","webpack://malcolm-app/external node-commonjs \"path\"","webpack://malcolm-app/webpack/bootstrap","webpack://malcolm-app/./main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"original-fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst { fstat } = require('original-fs');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst windowDefaults = {\r\n    width: 800,\r\n    height: 600,\r\n    y: 0,\r\n    webPreferences: {\r\n        preload: path.join(__dirname, 'preload.js'),\r\n    },\r\n};\r\n\r\nlet controlsWindow;\r\nlet showWindow;\r\n\r\napp.whenReady().then(_ => {\r\n    ipcMain.on('detailsUpdated', (event, details) => {\r\n        showWindow.webContents.send('updateDetails', details);\r\n        fs.writeFileSync(path.join(__dirname, 'details.txt'), details);\r\n    });\r\n\r\n    ipcMain.on('imageClicked', (event, imagePath) => {\r\n        showWindow.webContents.send('showImage', imagePath);\r\n    });\r\n\r\n    ipcMain.on('playVideo', (event, videoPath) => {\r\n        showWindow.webContents.send('playVideo', videoPath);\r\n    });\r\n\r\n    ipcMain.on('showText', (event, md) => {\r\n        showWindow.webContents.send('showText', md);\r\n    });\r\n\r\n    ipcMain.on('clear', (event, type) => {\r\n        showWindow.webContents.send('clear', type);\r\n    });\r\n\r\n    ipcMain.on('getFiles', _ => {\r\n        let result = {\r\n            videos: getFilesData('_media/videos'),\r\n            images: getFilesData('_media/images'),\r\n            sfx: getFilesData('_media/sfx')\r\n        }\r\n\r\n        controlsWindow.webContents.send(`listFiles`, result);\r\n\r\n        let details;\r\n\r\n        try {\r\n            details = fs.readFileSync(path.join(__dirname, 'details.txt'), {\r\n                encoding: 'utf8'\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n\r\n        controlsWindow.webContents.send('loadPreviousText', details);\r\n\r\n        function getFilesData(localPath) {\r\n            let filesData = [];\r\n\r\n            enforceDirectory(localPath);\r\n\r\n            const files = fs.readdirSync(localPath);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                filesData.push({\r\n                    name: path.parse(files[i]).name,\r\n                    url: path.join(__dirname, localPath, files[i])\r\n                });\r\n            }\r\n\r\n            return filesData;\r\n        }\r\n\r\n        function enforceDirectory(path) {\r\n            if (fs.existsSync(path)) {\r\n                return;\r\n            }\r\n\r\n            fs.mkdirSync(path, options = { recursive: true });\r\n        }\r\n    });\r\n\r\n    controlsWindow = new BrowserWindow({\r\n        ...windowDefaults,\r\n        x: 0\r\n    });\r\n\r\n    controlsWindow.loadFile('windows/controls.html');\r\n\r\n    showWindow = new BrowserWindow({\r\n        ...windowDefaults,\r\n        x: windowDefaults.width,\r\n        titleBarOverlay: true,\r\n        fullscreenable: false\r\n    });\r\n\r\n    showWindow.loadFile('windows/show.html');\r\n    showWindow.setMenu(null);\r\n    showWindow.setMenuBarVisibility(false);\r\n\r\n    app.on('activate', () => {\r\n        if (BrowserWindow.getAllWindows().length === 0) {\r\n            createWindow();\r\n        }\r\n    });\r\n});\r\n\r\napp.on('window-all-closed', () => {\r\n    if (process.platform !== 'darwin') app.quit()\r\n});"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","BrowserWindow","ipcMain","fstat","fs","path","windowDefaults","width","height","y","webPreferences","preload","join","__dirname","controlsWindow","showWindow","whenReady","then","_","on","event","details","webContents","send","writeFileSync","imagePath","videoPath","md","type","result","videos","getFilesData","images","sfx","readFileSync","encoding","err","console","log","localPath","filesData","existsSync","mkdirSync","options","recursive","enforceDirectory","files","readdirSync","i","length","push","name","parse","url","x","loadFile","titleBarOverlay","fullscreenable","setMenu","setMenuBarVisibility","getAllWindows","createWindow","process","platform","quit"],"sourceRoot":""}